#! /usr/bin/env python3

import argparse
import json

import rich

import cve_bin_tool.version_scanner

def main():
    parser = argparse.ArgumentParser(description="Scan file and record products found.")
    parser.add_argument("file", type=str, help="Path to the file")
    parser.add_argument("--out", type=str, default="/tmp/thorium/results",
                        help="Path to the results file for summary info (default: /tmp/thorium/results)")
    parser.add_argument("--tags", type=str, default="/tmp/thorium/tags",
                        help="Path to the tags directory (default: /tmp/thorium/tags)")
    parser.add_argument("--results", type=str, default="/tmp/thorium/result-files/results.json",
                        help="Path to the results JSON file (default: /tmp/thorium/result-files/results.json)")

    args = parser.parse_args()

    scanner = cve_bin_tool.version_scanner.VersionScanner()

    res = []
    tags = set()

    for si in scanner.scan_file(args.file):
        res.append({
            "vendor": si.product_info.vendor,
            "product": si.product_info.product,
            "version": si.product_info.version,
        })

        tags.add(f"{si.product_info.vendor}:{si.product_info.product}:{si.product_info.version}")

    # If there's nothing to report, exit early
    if len(res) == 0:
        with open(args.out, "w") as f:
            f.write("No products found")
        return

    # Sort the results by vendor, product, and version
    res = sorted(res, key=lambda v: (v["vendor"], v["product"], v["version"]))

    # Save table output
    with open(args.out, "w") as f:
        table = rich.table.Table(box=rich.box.MARKDOWN)

        table.add_column("Vendor")
        table.add_column("Product")
        table.add_column("Version")

        for row in res:
            table.add_row(row["vendor"], row["product"], row["version"])

        rich.print(table, file=f)

    # Save JSON output
    with open(args.results, "w") as f:
        json.dump(res, f)

    # Save tags
    with open(args.tags, "w") as f:
        json.dump({
            "CVEBinToolBOM": list(tags),
        }, f)


if __name__ == "__main__":
    main()
